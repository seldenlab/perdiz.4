[["index.html", "Morphologically similar, but regionally distinct: Perdiz arrow points from Caddo burial contexts in the American Southeast Preface 0.1 Primary findings 0.2 Acknowledgments 0.3 Funding 0.4 Data management 0.5 Colophon", " Morphologically similar, but regionally distinct: Perdiz arrow points from Caddo burial contexts in the American Southeast Robert Z. Selden, Jr.1 2022-04-29 Preface If you describe something with great accuracy, you describe it as closely as you can to what it is, to its true value. If you describe something with great precision, you do so in the greatest possible detail, even though that detail may not necessarily be the true value of the thing being described. Simon Winchester, The Perfectionists: How Precision Engineers Created the Modern World Generally considered diagnostic of Late Prehistoric Toyah assemblages, Perdiz arrow points are characteristic of the transition from the Late Prehistoric to the Protohistoric. If larger Perdiz arrow points from Caddo burials are conceived of as products of trade and/or exchange with Toyah groups, then those with longer blade lengths provide inference to shifts in Caddo selective preference, while those with shorter blade lengths evince local approaches to resharpening and/or retouch that were uniquely Caddo. This study asks whether linear shape variables convey discrete regional resharpening strategies, whether morphological trajectories differ between the northern and southern behavioural regions, and whether morphological disparity differs between larger and smaller size classes, as defined by differences in blade length. Results demonstrate distinct regional resharpening strategies and divergent morphological trajectories for Perdiz arrow points included as Caddo mortuary offerings in the northern and southern behavioural regions. Perdiz arrow point shapes were not found to differ in the large size class between the northern and southern behavioural regions, demonstrating consistency in Caddo preference, oralternativelyToyah manufacture. However, differences in the small size class suggest discrete local approaches to resharpening and/or retouch by Caddo knappers. Caddo groups that occupied the southern behavioural region may have also been less selective, preferring Perdiz arrow points with a greater range of diversity in shape and size, while their counterparts to the north preferred a more standardized product. Figure 0.1: Visualization of expectations 1) for Perdiz arrow point trajectories, where (a) morphological disparity in shape (dashed lines) is greater at a larger size (selective preference), and/or (b) morphological disparity in shape is greater at a smaller size (resharpening and/or retouch); where 2) morphological disparity in Perdiz arrow points is expected to be greater where blade length is shorter, due to episodic reduction or retouch; and 3) illustration of Perdiz arrow points offerings included with Caddo burials. 0.1 Primary findings Figure 0.2: Location of sites with Perdiz arrow points included in the study, extent of major drainage basins (Neches [brown], Sabine [maroon], and Red [navy] Rivers), and extent of the ancestral Caddo region (white). In the context of this effort, those sites from the Red River basin constitute the northern behavioural region, while those from the Sabine and Neches River basins represent the southern behavioural region. 0.1.1 Linear metrics For this effort, the mean maximum blade length for Perdiz arrow points from each behavioural region was calculated and used to bin the sample into two groups (henceforth, size classes); one with a longer blade, and the other, shorter. Following the assignment of size classes, data were joined in advance of analysis. The morphological form (shape + size) of the Perdiz arrow points was then split into shape (representing proportions between dimensions in an object) and size (sensu Klingenberg (2016)). Size and shape were calculated using the method of log-shape ratios proposed by Mosimann (1970), where the geometric mean is considered a proxy for size, and shape was calculated as the log of isometric size subtracted from the log of each linear/dimensional measure. An ANOVA was subsequently used to assess shape as a function of size class. ## boxplots by size class knitr::include_graphics(&#39;img/boxplot-linear.png&#39;) Figure 0.3: Boxplot by size class. ## pca by size class knitr::include_graphics(&#39;img/pca-linear.png&#39;) Figure 0.4: PCA by size class. 0.1.1.1 Results Blade length differs significantly between large and small Perdiz arrow point size classes in the northern and southern behavioural regions Shoulder width differs significantly between large and small Perdiz arrow point size classes in the southern behavioural region, but does not differ in the northern behavioural region Width differs significantly between large and small Perdiz arrow point size classes in the southern behavioural region, but does not differ in the northern behavioural region Thickness does not differ between large and small Perdiz arrow point size classes from either behavioural region Stem length does not differ between large and small Perdiz arrow point size classes from either behavioural region Stem width does not differ between large and small Perdiz arrow point size classes from either behavioural region ## resharpening knitr::include_graphics(&#39;img/img2/linresharp.png&#39;) Figure 0.5: Conceptual rendering of differences found to occur between Perdiz arrow point resharpening trajectories in the a, northern; and b, southern behavioural regions. In both cases, attributes associated with haftingmaximum stem length and stem widthare morphologically stable. However, differential approaches to resharpening and/or retouch resulted in distinct shape differences in Perdiz arrow point blades. Resharpening and/or retouch efforts of Caddo knappers from the northern behavioural region was limited to maximum blade length, while those from the southern behavioural region were found to be more dynamic, including changes in maximum blade length, width, and shoulder width that occur between size classes. 0.1.2 Geometric morphometrics This analysis follows recent geometric morphometric analyses of Perdiz arrow points (Selden and Dockall, in review) and Gahagan biface morphology across the southern Caddo area and central Texas (Selden Jr., Dockall, and Shafer 2018; Selden Jr., Dockall, and Dubied 2020), where Perdiz arrow points and Gahagan bifaces have been found to differ in shape across the same geography as Caddo bottles (Selden Jr. 2018a, 2018b, 2019, 2021). It also follows a recent geometric morphometric analysis in which Perdiz arrow points from the ancestral Caddo area were found to differ as a function of time, raw material, and burial context (Selden Jr et al. 2021; Selden Jr. et al. 2021). Landmark data were aligned to a global coordinate system (Kendall 1981, 1984; Slice 2001), achieved through generalized Procrustes superimposition (Rohlf and Slice 1990) performed in R 4.1.3 (R Core Development Team, 2022) using the geomorph library v. 4.0.3 (Adams et al. 2017; Adams and Otarola-Castillo 2013; Baken et al. 2021). Procrustes superimposition translates, scales, and rotates the coordinate data to allow for comparisons among objects (Gower 1975; Rohlf and Slice 1990). The geomorph package uses a partial Procrustes superimposition that projects the aligned specimens into tangent space subsequent to alignment in preparation for the use of multivariate methods that assume linear space (Rohlf 1999; Slice 2001). Principal components analysis (Jolliffe 2002) was used to visualise shape variation among the Perdiz arrow points. The shape changes described by each principal axis are commonly visualized using thin-plate spline warping of a reference 3D mesh (Klingenberg 2013; Sherratt et al. 2014). ## pca knitr::include_graphics(&#39;img/img2/gm-pca.png&#39;) Figure 0.6: PCA by size class, illustrating variability associated with basal morphology in PC1, and variability associated with blade morphology in PC2. To assess whether shape changes with size (allometry) or differs by size class, Procrustes ANOVAs (Goodall 1991) were run that enlist effect-sizes (zscores) computed as standard deviates of the generated sampling distributions (Michael. L. Collyer, Sekora, and Adams 2015). A residual randomization permutation procedure (RRPP; n = 10,000 permutations) was used for all Procrustes ANOVAs (Adams and Collyer 2015; M. L. Collyer and Adams 2018), which has higher statistical power and a greater ability to identify patterns in the data should they be present (Anderson and Ter Braak 2003). These results are detailed in Chapter 2. ## allometric (shape + size) trajectories by size class knitr::include_graphics(&#39;img/allometric.traj.png&#39;) Figure 0.7: The homogeneity of slopes test indicates that the slopes associated with large and small Perdiz arrow points from the northern and southern behavioural regions differ. This figure plots the first principal component of predicted values versus size as a stylized graphic of the allometric trend. A phenotypic trajectory analysis (Adams and Collyer 2007, 2009; M. L. Collyer and Adams 2007, 2013; Michael. L. Collyer, Sekora, and Adams 2015) was used to assess whether Caddo reduction or retouch trajectories differ between the northern and southern behavioural regions. The trajectory analysis was followed by an analysis of morphological disparity (M. L. Collyer and Adams 2020; Foote 1993; Zelditch et al. 2004) to identify potential differences in morphological diversity between size classes. ## Perdiz arrow point shape trajectories by size class knitr::include_graphics(&#39;img/img2/trajectory.png&#39;) Figure 0.8: Visualization of two shape trajectories for Perdiz arrow points (large/small) that occur in the northern and southern behavioural regions. Shape trajectories are projected onto the first two principal components of between-group shape variation (based on covariance matrix of group means). Trajectories are shown as lines, where the northern behavioural region is represented by squares, and the southern behavioural region by triangles. Transformations are added to facilitate an understanding of shape differences corresponding to large and small Perdiz arrow point shapes from each behavioural region. 0.1.2.1 Results Perdiz arrow point shape differs significantly between the large and small size classes in the northern behavioural region Perdiz arrow point shape differs significantly in the small size class between the northern and southern behavioural regions Perdiz arrow point size differs significantly in the large size class between the northern and southern behavioural regions Perdiz arrow point size differs significantly in the small size class between the northern and southern behavioural regions Allometry is significant, and the homogeneity of slopes test indicates that the slopes associated with large and small Perdiz arrow points from the northern and southern behavioural regions differ Modularity is significant Morphological integration is significant Results of the trajectory analysis demonstrate a significant difference between shape trajectories in the northern and southern behavioural regions Results of the morphological disparity analysis by shape demonstrate that the large Perdiz arrow points from the southern behavioural region occupy a significantly greater range of morphospace than the large and small Perdiz arrow points from the northern behavioural region Results of the morphological disparity analysis by size demonstrate that the large Perdiz arrow points from the southern behavioural region occupy a significantly greater range of morphospace than the large Perdiz arrow points in the northern behavioural region 0.2 Acknowledgments I extend my gratitude to the Caddo Nation of Oklahoma, the Caddo Nation Tribal Council, Tribal Chairman, and Tribal Historic Preservation Office for their guidance related to the development of the scanning protocols, for permission and access to NAGPRA and previously repatriated collections, and for frank discussions related to language surrounding burial contexts associated with Caddo children. Thanks also to the Anthropology and Archaeology Laboratory at Stephen F. Austin State University for the requisite permissions and access to the NAGPRA items from the Washington Square Mound site and Turner collection, and to Tom A. Middlebrook for brokering access to the Perdiz arrow points from Caddo burials at the Morse Mound site. Thanks also to John E. Dockall, Michael J. Shott, Lauren N. Butaric, David K. Thulman, Timothy K. Perttula, Jon C. Lohse, C. Britt Bousman, Jeffrey S. Girard, Hiram F. (Pete) Gregory, Thomas R. Hester, Harry J. Shafer, Elton R. Prewitt, Bonnie L. Etter, Kersten Bergstrom, Christian S. Hoggard, Emma Sherratt, Dean C. Adams, and Michael L. Collyer for their constructive criticisms, comments, and suggestions throughout the development of this research program, and to the editors and anonymous reviewers for their comments and constructive criticisms, which further improved the manuscript. 0.3 Funding Components of the analytical workflow were developed and funded by a Preservation Technology and Training grant (P14AP00138) to RZS from the National Center for Preservation Technology and Training, as well as grants to RZS from the Caddo Nation of Oklahoma, National Forests and Grasslands in Texas (15-PA-11081300-033) and the United States Forest Service (20-PA-11081300-074). Additional support for this project was provided by the Heritage Research Center at Stephen F. Austin State University. 0.4 Data management The data and analysis code associated with this project can be accessed through this document or the GitHub repository, and is digitally curated on the Open Science Framework (DOI 10.17605/OSF.IO/85BU7). Images and additional information for all Perdiz arrow points used in this study can be viewed and downloaded from the digital comparative collection https://scholarworks.sfasu.edu/ita-perdiz/. The replicable nature of this undertaking provides a means for others to critically assess and evaluate the various analytical components of this study (Gray and Marwick 2019; Peng 2011; Gandrud 2014), which is a necessary requirement for the production of reliable knowledge. Reproducibility projects in psychology and cancer biology are impacting current research practices across all domains. Examples of reproducible research are becoming more abundant in archaeology (Marwick 2016; Ivanovaite et al. 2020; Selden Jr., Dockall, and Dubied 2020), and the next generation of archaeologists are learning those tools and methods needed to reproduce and/or replicate research results (Marwick et al. 2019). Reproducible and replicable research work flows are often employed at the highest levels of humanities-based inquiries to mitigate concern or doubt regarding proper execution, and is of particular import should the results haveexplicitly or implicitlya major impact on scientific progress (Peels and Bouter 2018). 0.5 Colophon This version of the analysis was generated on 2022-04-29 04:30:58 using the following computational environment and dependencies: # what R packages and versions were used? if (&quot;devtools&quot; %in% installed.packages()) devtools::session_info() ## - Session info ------------------------------------------------------------ ## setting value ## version R version 4.1.3 (2022-03-10) ## os Windows 10 x64 (build 19044) ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate English_United States.1252 ## ctype English_United States.1252 ## tz America/Chicago ## date 2022-04-29 ## rstudio 2021.09.0+351 Ghost Orchid (desktop) ## pandoc 2.14.0.3 @ C:/Program Files/RStudio/bin/pandoc/ (via rmarkdown) ## ## - Packages ---------------------------------------------------------------- ## package * version date (UTC) lib source ## bookdown 0.26 2022-04-15 [1] CRAN (R 4.1.3) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.1) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.1) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.3) ## crayon 1.5.1 2022-03-26 [1] CRAN (R 4.1.3) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.3) ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.2) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.2) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.2) ## git2r 0.30.1 2022-03-16 [1] CRAN (R 4.1.3) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.3) ## here 1.0.1.9000 2021-11-08 [1] Github (r-lib/here@b66d1ab) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.3) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.1) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.3) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.2) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.2) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.3 2022-03-25 [1] CRAN (R 4.1.3) ## ps 1.7.0 2022-04-23 [1] CRAN (R 4.1.3) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.1) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.3) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.3) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.1.3) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## sass 0.4.1 2022-03-23 [1] CRAN (R 4.1.3) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.2) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.1) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## testthat 3.1.4 2022-04-26 [1] CRAN (R 4.1.3) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.3) ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.3) ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## ## [1] C:/Users/seldenjrz/Documents/R/win-library/4.1 ## [2] C:/Program Files/R/R-4.1.3/library ## ## --------------------------------------------------------------------------- Current Git commit details are: # where can I find this commit? if (&quot;git2r&quot; %in% installed.packages() &amp; git2r::in_repository(path = &quot;.&quot;)) git2r::repository(here::here()) ## Local: main E:/github/perdiz.4 ## Remote: main @ origin (https://github.com/seldenlab/perdiz.4) ## Head: [5fb85e0] 2022-04-29: &lt;edit ms&gt; References "],["linear-shapesize.html", "Chapter 1 Linear ~ shape/size 1.1 Load packages + data 1.2 Generalised Procrustes Analysis 1.3 2BPLS Maximum length 1.4 2BPLS Maximum blade length 1.5 2BPLS Maximum shoulder width 1.6 2BPLS Maximum width 1.7 2BPLS Maximum thickness 1.8 2BPLS Maximum stem length 1.9 2BPLS Maximum stem width", " Chapter 1 Linear ~ shape/size This study begins by asking which linear measure/sif anycan be said to covary with Perdiz arrow point shape and size? To assess covariance, Procrustes-aligned shape and centroid size are used in a pair of two-block partial least-squares analysis with each linear (caliper collected) metric. 1.1 Load packages + data # download most recent software version #devtools::install_github(&quot;geomorphR/geomorph&quot;, ref = &quot;Stable&quot;, build_vignettes = TRUE) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) # load analysis packages library(here) ## here() starts at E:/github/perdiz.4/supp library(StereoMorph) library(geomorph) ## Loading required package: RRPP ## Loading required package: rgl ## Loading required package: Matrix library(ggplot2) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggpubr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.perdiz.csv&quot;, header = TRUE, row.names = 1) # add derived vars to data # maximum blade length (derived) qdata$maxbl &lt;- qdata$maxl - qdata$maxstl # maximum shoulder width (derived) qdata$maxshw &lt;- qdata$maxw - qdata$maxstw 1.2 Generalised Procrustes Analysis Landmark data were aligned to a global coordinate system (Kendall 1981, 1984; Slice 2001), achieved through generalized Procrustes superimposition (Rohlf and Slice 1990) performed in R 4.1.3 (R Core Development Team, 2022) using the geomorph library v. 4.0.3 (Adams et al. 2017; Adams and Otarola-Castillo 2013; Baken et al. 2021). Procrustes superimposition translates, scales, and rotates the coordinate data to allow for comparisons among objects (Gower 1975; Rohlf and Slice 1990). The geomorph package uses a partial Procrustes superimposition that projects the aligned specimens into tangent space subsequent to alignment in preparation for the use of multivariate methods that assume linear space (Rohlf 1999; Slice 2001). # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize) 1.3 2BPLS Maximum length 1.3.1 Shape # is Perdiz arrow point shape correlated with linear var? shapeml &lt;- two.b.pls(Y.gpa$coords, qdata$maxl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapeml) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxl, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.1855 ## ## Effect Size (Z): -0.17271 ## ## P-value: 0.5668 ## ## Based on 10000 random permutations ## plot plot(shapeml) 1.3.2 Size # is Perdiz arrow point size correlated with linear var? sizeml &lt;- two.b.pls(Y.gpa$Csize, qdata$maxl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizeml) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxl, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.3445 ## ## Effect Size (Z): 2.7643 ## ## P-value: 0.0041 ## ## Based on 10000 random permutations ## plot plot(sizeml) 1.4 2BPLS Maximum blade length 1.4.1 Shape # is Perdiz arrow point shape correlated with linear var? shapembl &lt;- two.b.pls(Y.gpa$coords, qdata$maxbl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapembl) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxbl, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.2858 ## ## Effect Size (Z): 1.27424 ## ## P-value: 0.1049 ## ## Based on 10000 random permutations ## plot plot(shapembl) 1.4.2 Size # is Perdiz arrow point size correlated with linear var? sizembl &lt;- two.b.pls(Y.gpa$Csize, qdata$maxbl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizembl) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxbl, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.3381 ## ## Effect Size (Z): 2.69984 ## ## P-value: 0.0044 ## ## Based on 10000 random permutations ## plot plot(sizembl) 1.5 2BPLS Maximum shoulder width 1.5.1 Shape # is Perdiz arrow point shape correlated with linear var? shapemshw &lt;- two.b.pls(Y.gpa$coords, qdata$maxshw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapemshw) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxshw, iter = 9999, ## seed = NULL, print.progress = FALSE) ## ## ## ## r-PLS: 0.3082 ## ## Effect Size (Z): 1.49334 ## ## P-value: 0.07 ## ## Based on 10000 random permutations ## plot plot(shapemshw) 1.5.2 Size # is Perdiz arrow point size correlated with linear var? sizemshw &lt;- two.b.pls(Y.gpa$Csize, qdata$maxshw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizemshw) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxshw, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.111 ## ## Effect Size (Z): 0.89959 ## ## P-value: 0.3712 ## ## Based on 10000 random permutations ## plot plot(sizemshw) 1.6 2BPLS Maximum width 1.6.1 Shape # is Perdiz arrow point shape correlated with linear var? shapemw &lt;- two.b.pls(Y.gpa$coords, qdata$maxw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapemw) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxw, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.2963 ## ## Effect Size (Z): 1.36161 ## ## P-value: 0.0923 ## ## Based on 10000 random permutations ## plot plot(shapemw) 1.6.2 Size # is Perdiz arrow point size correlated with linear var? sizemw &lt;- two.b.pls(Y.gpa$Csize, qdata$maxw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizemw) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxw, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.206 ## ## Effect Size (Z): 1.67231 ## ## P-value: 0.0944 ## ## Based on 10000 random permutations ## plot plot(sizemw) 1.7 2BPLS Maximum thickness 1.7.1 Shape # is Perdiz arrow point shape correlated with linear var? shapemth &lt;- two.b.pls(Y.gpa$coords, qdata$maxth, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapemth) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxth, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.2108 ## ## Effect Size (Z): 0.2434 ## ## P-value: 0.4067 ## ## Based on 10000 random permutations ## plot plot(shapemth) 1.7.2 Size # is Perdiz arrow point size correlated with linear var? sizemth &lt;- two.b.pls(Y.gpa$Csize, qdata$maxth, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizemth) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxth, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.1291 ## ## Effect Size (Z): 1.0525 ## ## P-value: 0.3059 ## ## Based on 10000 random permutations ## plot plot(sizemth) 1.8 2BPLS Maximum stem length 1.8.1 Shape # is Perdiz arrow point shape correlated with linear var? shapemstl &lt;- two.b.pls(Y.gpa$coords, qdata$maxstl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapemstl) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxstl, iter = 9999, ## seed = NULL, print.progress = FALSE) ## ## ## ## r-PLS: 0.4003 ## ## Effect Size (Z): 2.42637 ## ## P-value: 0.0052 ## ## Based on 10000 random permutations ## plot plot(shapemstl) 1.8.2 Size # is Perdiz arrow point size correlated with linear var? sizemstl &lt;- two.b.pls(Y.gpa$Csize, qdata$maxstl, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizemstl) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxstl, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.1762 ## ## Effect Size (Z): 1.45327 ## ## P-value: 0.1478 ## ## Based on 10000 random permutations ## plot plot(sizemstl) 1.9 2BPLS Maximum stem width 1.9.1 Shape # is Perdiz arrow point shape correlated with linear var? shapemstw &lt;- two.b.pls(Y.gpa$coords, qdata$maxstw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(shapemstw) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = qdata$maxstw, iter = 9999, ## seed = NULL, print.progress = FALSE) ## ## ## ## r-PLS: 0.1585 ## ## Effect Size (Z): -0.64787 ## ## P-value: 0.7304 ## ## Based on 10000 random permutations ## plot plot(shapemstw) 1.9.2 Size # is Perdiz arrow point size correlated with linear var? sizemstw &lt;- two.b.pls(Y.gpa$Csize, qdata$maxstw, iter = 9999, seed = NULL, print.progress = FALSE) ## Data in either A1 or A2 do not have names. It is assumed data in both A1 and A2 are ordered the same. summary(sizemstw) ## ## Call: ## two.b.pls(A1 = Y.gpa$Csize, A2 = qdata$maxstw, iter = 9999, seed = NULL, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.4524 ## ## Effect Size (Z): 3.67031 ## ## P-value: 2e-04 ## ## Based on 10000 random permutations ## plot plot(sizemstw) References "],["linear-metrics-1.html", "Chapter 2 Linear metrics 2.1 Derived variables 2.2 Assign size classes 2.3 Shape variables 2.4 Ratios 2.5 Boxplots for Size Class 2.6 Principal Components Analysis 2.7 Analyses of Variance (ANOVA)", " Chapter 2 Linear metrics Two size classes (large/small) were used to examine whether the shape of Perdiz arrow points from the northern and southern behavioural regions of the ancestral Caddo region remain morphologically stable, or express morphological variation. Variability in Perdiz arrow point shape potentially provides evidence associated with differential resharpening trajectories. The maximum blade length variable used in this study is calculated as the difference between maximum length and maximum stem length. For that reason, it differs from traditional measures of maximum blade length, which often overlaps with maximum stem length if measuring Perdiz arrow points with calipers. Similarly, maximum shoulder length is calculated as the difference between maximum width and maximum shoulder width. Thus, while derivative of two linear measures, it does not account for the curvature that occurs in the range of that linear measurement. Similarly, it does not account for asymmetry on either side of the projectile. # load analysis libraries library(here) library(tidyverse) ## -- Attaching packages ------------------------------- tidyverse 1.3.1.9000 -- ## v tibble 3.1.6 v purrr 0.3.4 ## v tidyr 1.2.0 v stringr 1.4.0 ## v readr 2.1.2 v forcats 0.5.1 ## -- Conflicts --------------------------------------- tidyverse_conflicts() -- ## x tidyr::expand() masks Matrix::expand() ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## x tidyr::pack() masks Matrix::pack() ## x tidyr::unpack() masks Matrix::unpack() library(EnvStats) ## ## Attaching package: &#39;EnvStats&#39; ## The following object is masked from &#39;package:Matrix&#39;: ## ## print ## The following objects are masked from &#39;package:stats&#39;: ## ## predict, predict.lm ## The following object is masked from &#39;package:base&#39;: ## ## print.default library(ggpubr) library(ggfortify) library(cluster) library(ggExtra) library(RRPP) library(wesanderson) # load data perdiz.linear &lt;- read.csv(&quot;qdata.perdiz.csv&quot;, header = TRUE, as.is = TRUE) 2.1 Derived variables # add vars to data # maximum blade length (derived) perdiz.linear$maxbl &lt;- perdiz.linear$maxl - perdiz.linear$maxstl # maximum shoulder width (derived) perdiz.linear$maxshw &lt;- perdiz.linear$maxw - perdiz.linear$maxstw ## histograms h.maxbl &lt;- ggplot(perdiz.linear, aes(maxbl)) + geom_histogram() h.maxshw &lt;- ggplot(perdiz.linear, aes(maxshw)) + geom_histogram() h.maxw &lt;- ggplot(perdiz.linear, aes(maxw)) + geom_histogram() h.maxth &lt;- ggplot(perdiz.linear, aes(maxth)) + geom_histogram() h.maxstl &lt;- ggplot(perdiz.linear, aes(maxstl)) + geom_histogram() h.maxstw &lt;- ggplot(perdiz.linear, aes(maxstw)) + geom_histogram() # render figure figure.histograms &lt;- ggarrange(h.maxbl, h.maxshw, h.maxw, h.maxth, h.maxstl, h.maxstw, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;), ncol = 2, nrow = 3) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## plot figure figure.histograms 2.2 Assign size classes 2.2.1 Northern behavioural region # subset nbr dataset nbr &lt;- subset(perdiz.linear, region == &quot;north&quot;, select = spec:maxshw) # calculate mean blade length meanbl &lt;- mean(nbr$maxbl) # assign L/S varieties ls.check1 &lt;- nbr$maxbl &gt;= meanbl ls.check2 &lt;- nbr$maxbl &gt;= 0 &amp; nbr$maxbl &lt; meanbl nbr$size &lt;- &quot;&quot; nbr$size &lt;- ifelse(ls.check1, &quot;L&quot;, nbr$size) nbr$size &lt;- ifelse(ls.check2, &quot;S&quot;, nbr$size) 2.2.2 Southern behavioural region # subset sbr dataset sbr &lt;- subset(perdiz.linear, region == &quot;south&quot;, select = spec:maxshw) # calculate mean blade length meanbl &lt;- mean(sbr$maxbl) # assign L/S varieties based on mean blade length ls.check1 &lt;- sbr$maxbl &gt;= meanbl ls.check2 &lt;- sbr$maxbl &gt;= 0 &amp; sbr$maxbl &lt; meanbl sbr$size &lt;- &quot;&quot; sbr$size &lt;- ifelse(ls.check1, &quot;L&quot;, sbr$size) sbr$size &lt;- ifelse(ls.check2, &quot;S&quot;, sbr$size) 2.2.3 Aggregate # aggregate data mx &lt;- bind_rows(nbr, sbr) 2.3 Shape variables The morphological form (shape + size) of the Perdiz arrow points was split into shape (representing proportions between dimensions in an object) and size (sensu Klingenberg (2016)). Size and shape were calculated using the method of log-shape ratios proposed by Mosimann (1970), where the geometric mean is considered a proxy for size, and shape was calculated as the log of isometric size subtracted from the log of each linear/dimensional measure. # vars used to calculate geometric mean mx.maxbl &lt;- mx$maxbl mx.maxw &lt;- mx$maxw mx.maxshw &lt;- mx$maxshw mx.maxth &lt;- mx$maxth mx.maxstl &lt;- mx$maxstl mx.maxstw &lt;- mx$maxstw mean &lt;- c(mx.maxbl, mx.maxw, mx.maxshw, mx.maxth, mx.maxstl, mx.maxstw) # calculate geometric mean mx$geo.mean &lt;- geoMean(mean) geo.mean &lt;- mx$geo.mean # log of linear vars subtracted from log of geometric mean to isolate shape mx$sh.maxbl &lt;- log(mx.maxbl) - log(geo.mean) mx$sh.maxw &lt;- log(mx.maxw) - log(geo.mean) mx$sh.maxshw &lt;- log(mx.maxshw) - log(geo.mean) mx$sh.maxth &lt;- log(mx.maxth) - log(geo.mean) mx$sh.maxstl &lt;- log(mx.maxstl) - log(geo.mean) mx$sh.maxstw &lt;- log(mx.maxstw) - log(geo.mean) # join river region and size class mx &lt;- mx %&gt;% unite(&quot;merged&quot;, region, size, remove = FALSE) # export table for use in gm analysis write.csv(mx, &quot;qdata.morph.csv&quot;, row.names = FALSE) 2.4 Ratios # calculate ratios # blade:stem (linear vars) mx$perdiz.blade.stem2 &lt;- mx$maxbl / mx$maxstl # length:thickness # calculate sh.maxl var mx.maxl &lt;- mx$maxl mx$sh.maxl &lt;- log(mx.maxl) - log(geo.mean) # length:thickness (linear vars) mx$perdiz.length.thickness2 &lt;- mx$maxl / mx$maxth # palette pal &lt;- wes_palette(&quot;Moonrise2&quot;, 4, type = &quot;continuous&quot;) # boxplot blade:stem bl.st &lt;- ggplot(mx, aes(x = merged, y = perdiz.blade.stem2, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;Blade:Stem&#39;) # boxplot length:thickness lth &lt;- ggplot(mx, aes(x = merged, y = perdiz.length.thickness2, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;Length:Thickness&#39;) # render figure figure.ratios &lt;- ggarrange(bl.st, lth, labels = c(&quot;a&quot;, &quot;b&quot;), ncol = 2, nrow = 1) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## plot figure figure.ratios 2.5 Boxplots for Size Class Boxplots are used here to identify whether shape changes in similar ways between size classes. Three attributes (maximum blade length, shoulder width, and width) are associated with blade shape, two attributes (maximum stem length and stem width) articulate with base shape, and one attribute (maximum thickness) remains neutral as the thickest part of each projectile was inconsistent across blade and base designations. # boxplot of maximum blade length maxbl &lt;- ggplot(mx, aes(x = merged, y = sh.maxbl, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxBL&#39;) # boxplot of maximum shoulder width maxshw &lt;- ggplot(mx, aes(x = merged, y = sh.maxshw, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxShW&#39;) # boxplot of maximum width maxw &lt;- ggplot(mx, aes(x = merged, y = sh.maxw, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxW&#39;) # boxplot of maximum thickness maxth &lt;- ggplot(mx, aes(x = merged, y = sh.maxth, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxTh&#39;) # boxplot of maximum stem length maxstl &lt;- ggplot(mx, aes(x = merged, y = sh.maxstl, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxStL&#39;) # boxplot of stem width maxstw &lt;- ggplot(mx, aes(x = merged, y = sh.maxstw, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Size Class&#39;, y = &#39;MaxStW&#39;) # render figure figure &lt;- ggarrange(maxbl, maxshw, maxw, maxth, maxstl, maxstw, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;), ncol = 3, nrow = 2) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## plot figure figure Figure 2.1: Boxplots for shape variables associated with a, maximum length; b, width; c, thickness; d, stem length; and e, stem width for Perdiz arrow points from the northern and southern behavioural regions. 2.6 Principal Components Analysis #pca df &lt;- mx[c(14:19)] pch.gps &lt;- c(1:4)[as.factor(mx$merged)] col.gps &lt;- pal[as.factor(mx$merged)] ## pca plot pca &lt;- autoplot(prcomp(df), data = mx, asp = 1, shape = pch.gps, colour = &quot;merged&quot;, variance_percentage = TRUE, loadings = TRUE, loadings.colour = &#39;blue&#39;, loadings.label = TRUE, loadings.label.size = 3, frame = TRUE, frame.type = &#39;t&#39;) + scale_fill_manual(values = pal) + scale_colour_manual(values = pal) ggMarginal(pca, groupColour = TRUE) Figure 2.2: PCA of Perdiz arrow point shape variables by size class. 2.7 Analyses of Variance (ANOVA) Size classes and shape were analysed using an ANOVA to assess shape as a function of size class, and results are used to determine differences in Perdiz arrow point shape in and between behavioural regions. 2.7.1 Maximum blade length ~ size class # anova = maximum blade length ~ `size class` maxbl.sizeclass &lt;- lm.rrpp(mx.maxbl ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max blade length by size class? anova(maxbl.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 1133.59 377.86 0.71194 51.9 8.466 1e-04 *** ## Residuals 63 458.68 7.28 0.28806 ## Total 66 1592.27 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = mx.maxbl ~ merged, iter = 9999, SS.type = &quot;I&quot;, data = mx, ## print.progress = FALSE) # pairwise comparison of LS means = which differ? sh.pwmbl &lt;- pairwise(maxbl.sizeclass, groups = mx$merged) summary(sh.pwmbl, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 4.385535714 4.274304 1.624816 0.0438 ## north_L:south_L 7.473896104 3.278594 3.381410 0.0001 ## north_L:south_S 0.005807453 3.265382 -2.417057 0.9969 ## north_S:south_L 11.859431818 3.995983 4.071345 0.0001 ## north_S:south_S 4.379728261 3.993318 1.772626 0.0300 ## south_L:south_S 7.479703557 2.874613 3.714277 0.0001 2.7.2 Maximum shoulder width ~ size class # anova = maximum shoulder width ~ size class maxshw.sizeclass &lt;- lm.rrpp(mx.maxshw ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max shoulder width by size class? anova(maxshw.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 163.34 54.445 0.3356 10.607 4.1341 1e-04 *** ## Residuals 63 323.37 5.133 0.6644 ## Total 66 486.70 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = mx.maxshw ~ merged, iter = 9999, SS.type = &quot;I&quot;, ## data = mx, print.progress = FALSE) # pairwise comparison of LS means = which differ? sh.pwmshw &lt;- pairwise(maxshw.sizeclass, groups = mx$merged) summary(sh.pwmshw, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.6648214 2.327214 -0.1895397 0.5819 ## north_L:south_L 3.5823377 1.796377 3.0444081 0.0003 ## north_L:south_S 1.5481677 1.793366 1.3262156 0.0931 ## north_S:south_L 4.2471591 2.168869 3.0174038 0.0001 ## north_S:south_S 2.2129891 2.130397 1.6464855 0.0410 ## south_L:south_S 2.0341700 1.578860 2.0893699 0.0105 2.7.3 Maximum width ~ size class # anova = maximum width ~ size class maxw.sizeclass &lt;- lm.rrpp(mx.maxw ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max width by size class? anova(maxw.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 263.52 87.839 0.42587 15.577 5.022 1e-04 *** ## Residuals 63 355.26 5.639 0.57413 ## Total 66 618.78 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = mx.maxw ~ merged, iter = 9999, SS.type = &quot;I&quot;, data = mx, ## print.progress = FALSE) # pairwise comparison of LS means = which differ? sh.pwmw &lt;- pairwise(maxw.sizeclass, groups = mx$merged) summary(sh.pwmw, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.7014286 2.621982 -0.2609156 0.6082 ## north_L:south_L 4.6131169 2.029299 3.3901123 0.0001 ## north_L:south_S 2.3250932 2.027852 1.8310351 0.0244 ## north_S:south_L 5.3145455 2.428443 3.3140209 0.0001 ## north_S:south_S 3.0265217 2.405731 2.0373527 0.0116 ## south_L:south_S 2.2880237 1.781119 2.0873421 0.0104 2.7.4 Maximum thickness ~ size class # anova = maximum thickness ~ size class maxth.sizeclass &lt;- lm.rrpp(mx.maxth ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max thickness by size class? anova(maxth.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 0.6889 0.22963 0.03958 0.8654 0.097171 0.4651 ## Residuals 63 16.7165 0.26534 0.96042 ## Total 66 17.4054 ## ## Call: lm.rrpp(f1 = mx.maxth ~ merged, iter = 9999, SS.type = &quot;I&quot;, data = mx, ## print.progress = FALSE) 2.7.5 Maximum stem length ~ size class # anova = maximum stem length ~ size class maxstl.sizeclass &lt;- lm.rrpp(mx.maxstl ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max stem length by size class? anova(maxstl.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 12.227 4.0758 0.12581 3.0223 1.8095 0.0331 * ## Residuals 63 84.960 1.3486 0.87419 ## Total 66 97.187 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = mx.maxstl ~ merged, iter = 9999, SS.type = &quot;I&quot;, ## data = mx, print.progress = FALSE) # pairwise comparison of LS means = which differ? sh.pwmstl &lt;- pairwise(maxstl.sizeclass, groups = mx$merged) summary(sh.pwmstl, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.6082143 1.0400536 0.7039157 0.2614 ## north_L:south_L 1.1907143 0.8085779 2.3680681 0.0026 ## north_L:south_S 0.7220186 0.8029519 1.3900561 0.0809 ## north_S:south_L 0.5825000 0.9734148 0.7509011 0.2400 ## north_S:south_S 0.1138043 0.9731875 -0.9907170 0.8190 ## south_L:south_S 0.4686957 0.7028261 0.8961223 0.2008 2.7.6 Maximum stem width ~ size class # anova = maximum stem width ~ size class maxstw.sizeclass &lt;- lm.rrpp(mx.maxstw ~ merged, SS.type = &quot;I&quot;, data = mx, iter = 9999, print.progress = FALSE) ## difference in max stem width by size class? anova(maxstw.sizeclass) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 13.085 4.3615 0.37462 12.58 4.4758 1e-04 *** ## Residuals 63 21.843 0.3467 0.62538 ## Total 66 34.927 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = mx.maxstw ~ merged, iter = 9999, SS.type = &quot;I&quot;, ## data = mx, print.progress = FALSE) # pairwise comparison of LS means = which differ? sh.pwmstw &lt;- pairwise(maxstw.sizeclass, groups = mx$merged) summary(sh.pwmstw, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.03660714 0.6308929 -1.4266136 0.91165 ## north_L:south_L 1.03077922 0.4846883 3.2144738 0.00020 ## north_L:south_S 0.77692547 0.4841677 2.5231405 0.00170 ## north_S:south_L 1.06738636 0.5842102 2.8265047 0.00050 ## north_S:south_S 0.81353261 0.5815217 2.2504311 0.00680 ## south_L:south_S 0.25385375 0.4254980 0.7481331 0.24950 References "],["geometric-morphometrics-1.html", "Chapter 3 Geometric morphometrics 3.1 Load packages + data 3.2 Generalised Procrustes Analysis 3.3 Boxplot (centroid size) 3.4 Principal Components Analysis 3.5 Procrustes ANOVA: Allometry 3.6 Procrustes ANOVA: Shape and size 3.7 Modularity 3.8 Morphological integration 3.9 Trajectory analysis 3.10 Morphological disparity", " Chapter 3 Geometric morphometrics Two size classes (large/small) were used to examine whether the morphology of Perdiz arrow points from the northern and southern behavioural regions in the ancestral Caddo region remain morphologically stable, or express morphological variation. Variability in Perdiz arrow point shape potentially provides evidence associated with differential resharpening trajectories. This analysis follows recent analyses of Perdiz arrow points (Selden and Dockall, in review) and Gahagan biface morphology across the southern Caddo area and central Texas (Selden Jr., Dockall, and Shafer 2018; Selden Jr., Dockall, and Dubied 2020), where Perdiz arrow points and Gahagan bifaces have been found to differ in shape across the same geography as Caddo bottles (Selden Jr. 2018a, 2018b, 2019, 2021). It also follows another geometric morphometric analysis in which Perdiz arrow points from the ancestral Caddo area were found to differ as a function of time, raw material, and burial context (Selden Jr et al. 2021). 3.1 Load packages + data # load analysis packages library(here) library(StereoMorph) library(geomorph) library(ggplot2) library(dplyr) library(ggpubr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.morph.csv&quot;, header = TRUE, row.names = 1) 3.2 Generalised Procrustes Analysis Landmark data were aligned to a global coordinate system (Kendall 1981, 1984; Slice 2001), achieved through generalized Procrustes superimposition (Rohlf and Slice 1990) performed in R 4.1.3 (R Core Development Team, 2022) using the geomorph library v. 4.0.3 (Adams et al. 2017; Adams and Otarola-Castillo 2013; Baken et al. 2021). Procrustes superimposition translates, scales, and rotates the coordinate data to allow for comparisons among objects (Gower 1975; Rohlf and Slice 1990). The geomorph package uses a partial Procrustes superimposition that projects the aligned specimens into tangent space subsequent to alignment in preparation for the use of multivariate methods that assume linear space (Rohlf 1999; Slice 2001). # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize, merged = qdata$merged) # add centroid size to qdata qdata$csz &lt;- Y.gpa$Csize 3.3 Boxplot (centroid size) # attributes csz &lt;- qdata$csz merged &lt;- qdata$merged # palette pal &lt;- wes_palette(&quot;Moonrise2&quot;, 4, type = &quot;continuous&quot;) # boxplot of Perdiz arrow points by merged ggplot(qdata, aes(x = merged, y = csz, color = merged)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_color_manual(values = pal) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Size Class&#39;, y = &#39;Centroid Size&#39;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. 3.4 Principal Components Analysis Principal components analysis (Jolliffe 2002) was used to visualise shape variation among the Perdiz arrow points. The shape changes described by each principal axis are commonly visualized using thin-plate spline warping of a reference 3D mesh (Klingenberg 2013; Sherratt et al. 2014). # pca pca &lt;- gm.prcomp(Y.gpa$coords) summary(pca) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 67 ## Number of vectors 58 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 ## Eigenvalues 0.005773408 0.004263677 0.00110953 0.0002718422 ## Proportion of Variance 0.475367265 0.351059970 0.09135581 0.0223827748 ## Cumulative Proportion 0.475367265 0.826427234 0.91778304 0.9401658161 ## Comp5 Comp6 Comp7 Comp8 ## Eigenvalues 0.0002235284 0.0001238687 9.341316e-05 5.630102e-05 ## Proportion of Variance 0.0184047395 0.0101990267 7.691394e-03 4.635678e-03 ## Cumulative Proportion 0.9585705557 0.9687695824 9.764610e-01 9.810967e-01 ## Comp9 Comp10 Comp11 Comp12 ## Eigenvalues 3.794795e-05 3.555976e-05 3.274869e-05 2.100995e-05 ## Proportion of Variance 3.124534e-03 2.927897e-03 2.696441e-03 1.729904e-03 ## Cumulative Proportion 9.842212e-01 9.871491e-01 9.898455e-01 9.915754e-01 ## Comp13 Comp14 Comp15 Comp16 ## Eigenvalues 1.673629e-05 1.558522e-05 0.0000146522 9.479467e-06 ## Proportion of Variance 1.378022e-03 1.283246e-03 0.0012064237 7.805144e-04 ## Cumulative Proportion 9.929535e-01 9.942367e-01 0.9954431225 9.962236e-01 ## Comp17 Comp18 Comp19 Comp20 ## Eigenvalues 8.202708e-06 6.581542e-06 5.623302e-06 4.551824e-06 ## Proportion of Variance 6.753894e-04 5.419068e-04 4.630079e-04 3.747852e-04 ## Cumulative Proportion 9.968990e-01 9.974409e-01 9.979039e-01 9.982787e-01 ## Comp21 Comp22 Comp23 Comp24 ## Eigenvalues 4.004696e-06 2.780295e-06 2.539899e-06 2.053898e-06 ## Proportion of Variance 3.297361e-04 2.289221e-04 2.091286e-04 1.691126e-04 ## Cumulative Proportion 9.986085e-01 9.988374e-01 9.990465e-01 9.992156e-01 ## Comp25 Comp26 Comp27 Comp28 ## Eigenvalues 1.684806e-06 1.383734e-06 1.008708e-06 9.296041e-07 ## Proportion of Variance 1.387225e-04 1.139330e-04 8.305433e-05 7.654116e-05 ## Cumulative Proportion 9.993543e-01 9.994683e-01 9.995513e-01 9.996279e-01 ## Comp29 Comp30 Comp31 Comp32 ## Eigenvalues 7.104462e-07 6.995574e-07 5.611282e-07 4.574896e-07 ## Proportion of Variance 5.849627e-05 5.759972e-05 4.620182e-05 3.766849e-05 ## Cumulative Proportion 9.996864e-01 9.997440e-01 9.997902e-01 9.998278e-01 ## Comp33 Comp34 Comp35 Comp36 ## Eigenvalues 3.740460e-07 3.295267e-07 3.023244e-07 2.819142e-07 ## Proportion of Variance 3.079797e-05 2.713236e-05 2.489260e-05 2.321208e-05 ## Cumulative Proportion 9.998586e-01 9.998858e-01 9.999107e-01 9.999339e-01 ## Comp37 Comp38 Comp39 Comp40 ## Eigenvalues 1.822967e-07 1.544787e-07 1.175824e-07 1.003652e-07 ## Proportion of Variance 1.500983e-05 1.271937e-05 9.681424e-06 8.263810e-06 ## Cumulative Proportion 9.999489e-01 9.999616e-01 9.999713e-01 9.999796e-01 ## Comp41 Comp42 Comp43 Comp44 ## Eigenvalues 8.345271e-08 3.996616e-08 3.159475e-08 2.666575e-08 ## Proportion of Variance 6.871277e-06 3.290708e-06 2.601429e-06 2.195587e-06 ## Cumulative Proportion 9.999864e-01 9.999897e-01 9.999923e-01 9.999945e-01 ## Comp45 Comp46 Comp47 Comp48 ## Eigenvalues 2.255638e-08 1.462538e-08 8.448002e-09 6.927099e-09 ## Proportion of Variance 1.857233e-06 1.204216e-06 6.955863e-07 5.703591e-07 ## Cumulative Proportion 9.999964e-01 9.999976e-01 9.999983e-01 9.999988e-01 ## Comp49 Comp50 Comp51 Comp52 ## Eigenvalues 3.723904e-09 3.152719e-09 2.374219e-09 1.963601e-09 ## Proportion of Variance 3.066164e-07 2.595866e-07 1.954869e-07 1.616777e-07 ## Cumulative Proportion 9.999991e-01 9.999994e-01 9.999996e-01 9.999998e-01 ## Comp53 Comp54 Comp55 Comp56 ## Eigenvalues 1.208301e-09 6.656422e-10 4.846033e-10 2.571792e-10 ## Proportion of Variance 9.948832e-08 5.480723e-08 3.990096e-08 2.117546e-08 ## Cumulative Proportion 9.999999e-01 9.999999e-01 1.000000e+00 1.000000e+00 ## Comp57 Comp58 ## Eigenvalues 1.910708e-10 8.289472e-11 ## Proportion of Variance 1.573227e-08 6.825333e-09 ## Cumulative Proportion 1.000000e+00 1.000000e+00 # set plot parameters pch.gps &lt;- c(1:4)[as.factor(merged)] col.gps &lt;- pal[as.factor(merged)] col.hull &lt;- c(&quot;#798E87&quot;, &quot;#C27D38&quot;, &quot;#CCC591&quot;, &quot;#29211F&quot;) ## pca plot pc.plot &lt;- plot(pca, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = merged, group.cols = col.hull) 3.4.1 Minima/maxima of PC1/2 with warp grids # plot x/y maxima/minima ## x - minima mean.shape &lt;- mshape(Y.gpa$coords) plotRefToTarget(pca$shapes$shapes.comp1$min, mean.shape) ## x - maxima plotRefToTarget(pca$shapes$shapes.comp1$max, mean.shape) ## y - minima plotRefToTarget(pca$shapes$shapes.comp2$min, mean.shape) ## y - maxima plotRefToTarget(pca$shapes$shapes.comp2$max, mean.shape) 3.4.2 Composite PCA with warp grids ## plot composite pca with PC1/2 max/min knitr::include_graphics(&#39;img/img2/gm-pca.png&#39;) 3.5 Procrustes ANOVA: Allometry To assess whether shape changes with size (allometry), Procrustes ANOVAs (Goodall 1991) were run that enlist effect-sizes (zscores) computed as standard deviates of the generated sampling distributions (M. L. Collyer, Sekora, and Adams 2015). A residual randomization permutation procedure (RRPP; n = 10,000 permutations) was used for all Procrustes ANOVAs (Adams and Collyer 2015; M. L. Collyer and Adams 2018), which has higher statistical power and a greater ability to identify patterns in the data should they be present (Anderson and Ter Braak 2003). # allometry fit.size &lt;- procD.lm(shape ~ size, data = gdf, print.progress = FALSE, iter = 9999) # allometry anova(fit.size) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.11834 0.118340 0.14763 11.258 3.7912 1e-04 *** ## Residuals 65 0.68324 0.010511 0.85237 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size, iter = 9999, data = gdf, print.progress = FALSE) # unique allometries? fit.unique &lt;- procD.lm(shape ~ size * merged, data = gdf, print.progress = FALSE, iter = 9999) # unique allometries anova(fit.unique) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.11834 0.118340 0.14763 12.7163 3.9820 1e-04 *** ## merged 3 0.05847 0.019488 0.07294 2.0941 1.8027 0.0357 * ## size:merged 3 0.07571 0.025238 0.09446 2.7120 2.3035 0.0105 * ## Residuals 59 0.54906 0.009306 0.68497 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size * merged, iter = 9999, data = gdf, ## print.progress = FALSE) # plot ## PredLine (Adams and Nistri 2010) plotAllometry(fit.unique, size = gdf$size, logsz = TRUE, method = &quot;PredLine&quot;, pch = pch.gps, col = col.gps) 3.6 Procrustes ANOVA: Shape and size To assess whether shape and size differ by size class, Procrustes ANOVAs (Goodall 1991) were run that enlist effect-sizes (zscores) computed as standard deviates of the generated sampling distributions (M. L. Collyer, Sekora, and Adams 2015). A residual randomization permutation procedure (RRPP; n = 10,000 permutations) was used for all Procrustes ANOVAs (Adams and Collyer 2015; M. L. Collyer and Adams 2018), which has higher statistical power and a greater ability to identify patterns in the data should they be present (Anderson and Ter Braak 2003). # shape fit.sh.reg &lt;- procD.lm(shape ~ merged, data = gdf, print.progress = FALSE, iter = 9999) # difference in shape by size class? anova(fit.sh.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 0.10010 0.033367 0.12488 2.9966 2.6487 0.0038 ** ## Residuals 63 0.70148 0.011135 0.87512 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ merged, iter = 9999, data = gdf, print.progress = FALSE) # pairwise comparison of LS means = which differ? pw.sh.reg &lt;- pairwise(fit.sh.reg, groups = qdata$merged) summary(pw.sh.reg, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.10303874 0.07924105 2.4114393 0.0046 ## north_L:south_L 0.05011667 0.06117665 1.0941187 0.1436 ## north_L:south_S 0.03985408 0.06060269 0.4950596 0.3217 ## north_S:south_L 0.11012158 0.07324844 2.8681547 0.0009 ## north_S:south_S 0.10319047 0.07251068 2.7027293 0.0017 ## south_L:south_S 0.01657002 0.05318001 -1.2603364 0.8892 # size fit.sz.reg &lt;- procD.lm(size ~ merged, data = gdf, print.progress = FALSE, iter = 9999) # size anova(fit.sz.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## merged 3 22.934 7.6446 0.34701 11.16 4.1706 1e-04 *** ## Residuals 63 43.155 0.6850 0.65299 ## Total 66 66.089 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = size ~ merged, iter = 9999, data = gdf, print.progress = FALSE) # pairwise comparison of LS means = which differ? pw.sz.reg &lt;- pairwise(fit.sz.reg, groups = qdata$merged) summary(pw.sz.reg, confidence = 0.95, test.type = &quot;dist&quot;) ## ## Pairwise comparisons ## ## Groups: north_L north_S south_L south_S ## ## RRPP: 10000 permutations ## ## LS means: ## Vectors hidden (use show.vectors = TRUE to view) ## ## Pairwise distances between means, plus statistics ## d UCL (95%) Z Pr &gt; d ## north_L:north_S 0.70995445 0.8650155 1.239690 0.1086 ## north_L:south_L 0.95927394 0.6787305 2.290754 0.0048 ## north_L:south_S 0.86926347 0.6665158 2.085959 0.0100 ## north_S:south_L 1.66922839 0.7998731 3.165704 0.0003 ## north_S:south_S 1.57921791 0.7949796 3.023732 0.0003 ## south_L:south_S 0.09001048 0.5770700 -0.757120 0.7638 3.7 Modularity land.gps &lt;- c(&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;A&quot;,&quot;A&quot;) mod &lt;- modularity.test(Y.gpa$coords, partition.gp = land.gps, iter = 9999, seed = NULL, opt.rot = TRUE, print.progress = FALSE) summary(mod) ## ## Call: ## modularity.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, ## seed = NULL, opt.rot = TRUE, print.progress = FALSE) ## ## ## ## CR: 0.94387 ## ## P-value: 6e-04 ## ## Effect Size: -4.7686 ## ## Based on 10000 random permutations ## modularity plot plot(mod) 3.8 Morphological integration it &lt;- integration.test(Y.gpa$coords, partition.gp = land.gps, print.progress = FALSE, iter = 9999) summary(it) ## ## Call: ## integration.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.9676 ## ## Effect Size (Z): 6.23893 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations ## integration plot plot(it) 3.9 Trajectory analysis # trajectory analysis::shape TA &lt;- trajectory.analysis(fit.sh.reg, groups = qdata$region, traj.pts = qdata$size, print.progress = FALSE) # magnitude difference summary(TA, attribute = &quot;MD&quot;) ## ## Trajectory analysis ## ## 10000 permutations. ## ## Points projected onto trajectory PCs ## ## Trajectories: ## Trajectories hidden (use show.trajectories = TRUE to view) ## ## Observed path distances by group ## ## north south ## 0.10303874 0.01657002 ## ## Pairwise absolute differences in path distances, plus statistics ## d UCL (95%) Z Pr &gt; d ## north:south 0.08646872 0.05328336 2.511681 0.0017 # plot TP &lt;- plot(TA, pch = as.numeric(qdata$region), bg = as.numeric(qdata$size), cex = 0.9, col = &quot;gray&quot;) add.trajectories(TP, traj.pch = c(15, 17), traj.cex = 1) knitr::include_graphics(&#39;img/img2/trajectory.png&#39;) 3.10 Morphological disparity # morphological disparity in shape morphol.disparity(fit.sh.reg, groups = qdata$merged, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sh.reg, groups = qdata$merged, iter = 9999, ## data = gdf, print.progress = FALSE) ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north_L north_S south_L south_S ## 0.006787206 0.005489185 0.014294381 0.010785645 ## ## ## Pairwise absolute differences between variances ## north_L north_S south_L south_S ## north_L 0.000000000 0.001298021 0.007507174 0.003998439 ## north_S 0.001298021 0.000000000 0.008805195 0.005296460 ## south_L 0.007507174 0.008805195 0.000000000 0.003508735 ## south_S 0.003998439 0.005296460 0.003508735 0.000000000 ## ## ## P-Values ## north_L north_S south_L south_S ## north_L 1.0000 0.7705 0.0179 0.2223 ## north_S 0.7705 1.0000 0.0229 0.1756 ## south_L 0.0179 0.0229 1.0000 0.2263 ## south_S 0.2223 0.1756 0.2263 1.0000 # morphological disparity in size morphol.disparity(fit.sz.reg, groups = qdata$merged, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sz.reg, groups = qdata$merged, iter = 9999, ## data = gdf, print.progress = FALSE) ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north_L north_S south_L south_S ## 0.1558141 0.2508603 1.0774395 0.6636123 ## ## ## Pairwise absolute differences between variances ## north_L north_S south_L south_S ## north_L 0.00000000 0.09504627 0.9216254 0.5077983 ## north_S 0.09504627 0.00000000 0.8265792 0.4127520 ## south_L 0.92162545 0.82657918 0.0000000 0.4138272 ## south_S 0.50779827 0.41275200 0.4138272 0.0000000 ## ## ## P-Values ## north_L north_S south_L south_S ## north_L 1.0000 0.8200 0.0160 0.2357 ## north_S 0.8200 1.0000 0.0999 0.3255 ## south_L 0.0160 0.0999 1.0000 0.2836 ## south_S 0.2357 0.3255 0.2836 1.0000 References "],["gm-v-linear.html", "Chapter 4 GM v Linear 4.1 Load packages + data 4.2 Generalised Procrustes Analysis 4.3 Shape vs linear data (shape vars) 4.4 Shape vs linear data (linear vars)", " Chapter 4 GM v Linear 4.1 Load packages + data # download most recent software version #devtools::install_github(&quot;geomorphR/geomorph&quot;, ref = &quot;Stable&quot;, build_vignettes = TRUE) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) # load analysis packages library(here) library(StereoMorph) library(geomorph) library(ggplot2) library(dplyr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.morph.csv&quot;, header = TRUE, row.names = 1) 4.2 Generalised Procrustes Analysis # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize) 4.3 Shape vs linear data (shape vars) # are shape and linear data correlated? # subset linear data linear &lt;- qdata %&gt;% select(sh.maxbl, sh.maxw, sh.maxshw, sh.maxth, sh.maxstl, sh.maxstw) # 2B-PLS shape.meas.cor &lt;- two.b.pls(A1 = Y.gpa$coords, A2 = linear, print.progress = FALSE, iter = 9999) summary(shape.meas.cor) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = linear, iter = 9999, print.progress = FALSE) ## ## ## ## ## r-PLS: 0.7676 ## ## Effect Size (Z): 5.3903 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations ## plot PLS plot(shape.meas.cor) 4.4 Shape vs linear data (linear vars) # are shape and linear data correlated? # subset linear data linear2 &lt;- qdata %&gt;% select(maxl, maxw, maxth, maxstl, maxstw) # 2B-PLS shape.meas.cor &lt;- two.b.pls(A1 = Y.gpa$coords, A2 = linear2, print.progress = FALSE, iter = 9999) summary(shape.meas.cor) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = linear2, iter = 9999, print.progress = FALSE) ## ## ## ## ## r-PLS: 0.6022 ## ## Effect Size (Z): 3.96754 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations ## plot PLS plot(shape.meas.cor) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
